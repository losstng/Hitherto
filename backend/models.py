from sqlalchemy import (
    Column,
    Integer,
    Text,
    String,
    DateTime,
    JSON,
    Boolean,
    Enum,
    ForeignKey,
    Float,
    func,
)
from sqlalchemy.orm import relationship
import enum
from .database import Base  # assumes you have a `Base = declarative_base()` in `database.py`



class Newsletter(Base):
    __tablename__ = "newsletter"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(Text, nullable=False)
    category = Column(String, nullable=True)
    sender = Column(String, nullable=False)
    received_at = Column(DateTime, nullable=False)
    extracted_text = Column(Text, nullable=True)
    chunked_text = Column(JSON, nullable=True)  # JSON array of text chunks
    message_id = Column(String, unique=True, nullable=False)
    token_count = Column(Integer, nullable=True)
    created_at = Column(DateTime, server_default=func.now())
    vectorized = Column(Boolean, default=False)


class SecFiling(Base):
    """Model storing metadata about fetched SEC filings."""

    __tablename__ = "sec_filing"

    id = Column(Integer, primary_key=True, index=True)
    cik = Column(String, index=True, nullable=False)
    accession_number = Column(String, unique=True, nullable=False)
    form_type = Column(String, nullable=False)
    filed_at = Column(DateTime, nullable=False)
    data = Column(JSON, nullable=True)
    created_at = Column(DateTime, server_default=func.now())


class Signal(Base):
    """Outputs from individual analysis modules."""

    __tablename__ = "signals"

    id = Column(Integer, primary_key=True, index=True)
    module_name = Column(String, nullable=False)
    signal_type = Column(String, nullable=False)
    content_json = Column(JSON, nullable=False)
    generated_at = Column(DateTime, server_default=func.now(), nullable=False)


class ProposalStatus(enum.Enum):
    PENDING_REVIEW = "PENDING_REVIEW"
    APPROVED = "APPROVED"
    REJECTED = "REJECTED"
    EXECUTED = "EXECUTED"


class Proposal(Base):
    """Policy proposals generated by the Overseer."""

    __tablename__ = "proposals"

    id = Column(Integer, primary_key=True, index=True)
    proposal_json = Column(JSON, nullable=False)
    status = Column(Enum(ProposalStatus), default=ProposalStatus.PENDING_REVIEW, nullable=False)
    created_at = Column(DateTime, server_default=func.now(), nullable=False)


class Decision(Base):
    """Final trade decisions executed in the market."""

    __tablename__ = "decisions"

    id = Column(Integer, primary_key=True, index=True)
    proposal_id = Column(Integer, ForeignKey("proposals.id"), nullable=False)
    executed_action = Column(JSON, nullable=False)
    executed_at = Column(DateTime, server_default=func.now(), nullable=False)
    human_note = Column(Text, nullable=True)

    proposal = relationship("Proposal", backref="decisions")


class Regime(Base):
    """Regime classification over time."""

    __tablename__ = "regimes"

    id = Column(Integer, primary_key=True, index=True)
    effective_at = Column(DateTime, nullable=False)
    regime_label = Column(String, nullable=False)
    classified_by = Column(String, nullable=False)
    confidence = Column(Float, nullable=True)
    notes = Column(Text, nullable=True)


class Override(Base):
    """Logs of human interventions and overrides."""

    __tablename__ = "overrides"

    id = Column(Integer, primary_key=True, index=True)
    time = Column(DateTime, server_default=func.now(), nullable=False)
    module = Column(String, nullable=False)
    action = Column(String, nullable=False)
    details_json = Column(JSON, nullable=True)
    user = Column(String, nullable=False)
    proposal_id = Column(Integer, ForeignKey("proposals.id"), nullable=True)
    signal_id = Column(Integer, ForeignKey("signals.id"), nullable=True)

    proposal = relationship("Proposal", backref="overrides")
    signal = relationship("Signal", backref="overrides")


class Feedback(Base):
    """Human-labeled feedback for training."""

    __tablename__ = "feedback"

    id = Column(Integer, primary_key=True, index=True)
    item_id = Column(Integer, ForeignKey("signals.id"), nullable=False)
    feedback_type = Column(String, nullable=False)
    old_value = Column(JSON, nullable=True)
    new_value = Column(JSON, nullable=True)
    created_at = Column(DateTime, server_default=func.now(), nullable=False)

    signal = relationship("Signal", backref="feedback_entries")

